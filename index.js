// Generated by CoffeeScript 1.11.0
(function() {
  var Promise, _, ffmpeg, fs, path, stream, uuid,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Promise = require('bluebird');

  stream = require('stream');

  ffmpeg = require('fluent-ffmpeg');

  uuid = require('node-uuid');

  fs = require('fs');

  path = require('path');

  _ = require('lodash');

  module.exports = function(opts) {
    var Frame;
    if (opts == null) {
      opts = {
        timestamps: [0],
        size: '320x240'
      };
    }
    Frame = (function(superClass) {
      extend(Frame, superClass);

      Frame.folder = '/tmp';

      Frame.prototype.path = function() {
        return Frame.folder + "/" + (uuid.v1());
      };

      Frame.prototype.video = function() {
        return new Promise((function(_this) {
          return function(resolve, reject) {
            return _this.on('pipe', function(src) {
              return src.on('error', reject).pipe(fs.createWriteStream(_this.file.video)).on('error', reject).on('finish', resolve);
            });
          };
        })(this));
      };

      Frame.prototype.png = function() {
        return new Promise((function(_this) {
          return function(resolve, reject) {
            return ffmpeg(_this.file.video).on('error', reject).on('end', function() {
              return resolve();
            }).screenshots(_.defaults(opts, {
              filename: path.basename(_this.file.png),
              folder: Frame.folder
            })).on('error', reject);
          };
        })(this));
      };

      function Frame(opts) {
        this.png = bind(this.png, this);
        this.video = bind(this.video, this);
        Frame.__super__.constructor.call(this, opts);
        this.file = {
          video: (this.path()) + ".video",
          png: (this.path()) + ".png"
        };
        this.video().then(this.png).then((function(_this) {
          return function() {
            return new Promise(function(resolve, reject) {
              return fs.createReadStream(_this.file.png).on('data', function(chunk) {
                return _this.push(chunk);
              }).on('end', function() {
                _this.end();
                return resolve();
              });
            });
          };
        })(this))["catch"]((function(_this) {
          return function(err) {
            return _this.emit('error', err);
          };
        })(this))["finally"]((function(_this) {
          return function() {
            var rm;
            rm = Promise.promisify(fs.unlink);
            rm(_this.file.video)["catch"](function() {});
            return rm(_this.file.png)["catch"](function() {});
          };
        })(this));
      }

      Frame.prototype._transform = function(chunk, encoding, cb) {
        return cb();
      };

      return Frame;

    })(stream.Transform);
    return new Frame();
  };

}).call(this);
